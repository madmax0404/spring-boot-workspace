<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="auth">
	<resultMap id="UserResult" type="com.kh.menu.security.model.dto.AuthDto$User" autoMapping="true">
        <id property="id" column="ID" />
        <collection property="roles" ofType="java.lang.String">
            <result column="AUTHORITY"/>
        </collection>
    </resultMap>
    
    <!-- 1. 로그인시 사용하는 함수 -->
    <select id="findUserByEmail" resultMap="UserResult">
        SELECT id, email, name, profile, password, authority
        FROM USERS U
        left JOIN user_credentials UC ON U.ID = UC.USER_ID
        JOIN USER_AUTHORITY UA ON U.ID = UA.USER_ID
        WHERE UPPER(EMAIL) = UPPER(#{email})
    </select>
    
    <!-- 자동 회원가입 코드(USERS, CRED, AUTH 테이블) -->
    <insert id="insertUser">
    	<selectKey keyProperty="id" resultType="long" order="BEFORE">
    		select SQE_USERS_ID.nextval from dual
    	</selectKey>
    	insert into users(id, email, name, profile)
    	values(#{id}, #{email}, #{name}, #{profile})
    </insert>
    
    <insert id="insertCred">
        INSERT INTO USER_CREDENTIALS (USER_ID, PASSWORD)
        VALUES (#{userId}, #{password})
    </insert>
    
    <insert id="insertUserRole">
    	insert all
    	<foreach collection="roles" item="role">
    		into USER_AUTHORITY(user_id, authority)
    		values(#{userId}, #{role})
    	</foreach>
    	select 1 from dual
    </insert>
    
    <select id="findUserByUserId" resultMap="UserResult">
        SELECT id, email, name, profile, password, authority
        FROM USERS U
        left JOIN user_credentials UC ON U.ID = UC.USER_ID
        JOIN USER_AUTHORITY UA ON U.ID = UA.USER_ID
        WHERE U.ID = #{id}
    </select>
    
    <insert id="insertUserIdentities">
    	insert into user_identities
    	values(SEQ_USER_IDENTITIES_ID.nextval, #{userId}, #{accessToken}, #{provider}, #{providerUserId})
    </insert>
    
    <update id="updateUserIdentities">
    	update user_identities
    	set access_token = #{accessToken}
    	where provider = #{provider} and provider_user_id = #{providerUserId}
    </update>
    
    <select id="getKakaoAccessToken" resultType="string">
        SELECT ACCESS_TOKEN
        FROM USER_IDENTITIES
        WHERE USER_ID = #{userId}
    </select>
</mapper>




